{
	"info": {
		"_postman_id": "85a4ff7b-669b-4cac-a154-65ae2d4e9e67",
		"name": "EOCS-T902(Titan)",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these request types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT and PATCH requests.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a variable called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more scripts in \"Tests\" to verify if the API works as expected and execute flows.\n    \n\n## ‚ÑπÔ∏è Resources\n\n[Building requests](https://learning.postman.com/docs/sending-requests/requests/)  \n[Authorizing requests](https://learning.postman.com/docs/sending-requests/authorization/)  \n[Using variables](https://learning.postman.com/docs/sending-requests/variables/)  \n[Managing environments](https://learning.postman.com/docs/sending-requests/managing-environments/)  \n[Writing scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1555972",
		"_collection_link": "https://interstellar-eocs.postman.co/workspace/Automation~66c7db3f-9f04-48e3-b9a3-43702bf4ebaf/collection/1555972-85a4ff7b-669b-4cac-a154-65ae2d4e9e67?action=share&creator=1555972&source=collection_link"
	},
	"item": [
		{
			"name": "Uedei BAO Authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    \r",
							"    const response = pm.response.json()\r",
							"pm.collectionVariables.set(\"UeDEI_access_token\", response.access_token)\r",
							"\r",
							"pm.test(\"User logged in successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "authorization",
						"value": "Basic QkFPOjg2MTczZTE2LWMyMDctNGM3OC04ZTgwLWFmNDBlYWFlNmY5NA==",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "ApiTestUser",
							"type": "text"
						},
						{
							"key": "password",
							"value": "ApiTestUser",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://uedei.titan-main.apps.ef-dev.at/v1/registerSession",
					"protocol": "http",
					"host": [
						"uedei",
						"titan-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"v1",
						"registerSession"
					]
				},
				"description": "Login eITI of any system\n\nYou need to write the system name you would like to test in the following area.\n\n- Click on EOCS-T902 folder on left.\n- Click Variables tab.\n- Enter any system (for ex. master, titan, vega, etc.) in Current value field.\n    \n\n<img src=\"https://content.pstmn.io/23e67e88-f75b-40aa-bb3f-7580e4128b84/aW1hZ2UucG5n\">\n\nClick on the picture to see it bigger.\n\nAfter sending request succesfully, check if the 'access_token' from response exist as in the following picture.\n\nAfter opening EOCS-T902 directory and variables tab, look for UeDEI_access_token variable, if it does not exist ,add it and paste the copied access token value from first request in Current value field.\n\n<img src=\"https://content.pstmn.io/ae8bbe9a-d4fd-4aa7-8bee-e95cd9f05a2c/aW1hZ2UucG5n\" alt=\"Adding%20access%20token%20value\">\n\n<img src=\"https://content.pstmn.io/66146ce5-e2b3-4276-bbd6-b3a64565f408/aW1hZ2UucG5n\" alt=\"Authorization%20type%20for%20other%20requests\">\n\nFor every request after eITI Authenticate request, you select Bearer token as Authorization type and write the token field {{eITI_access_token}} as in the above picture.\n\n_**_\n\nIf you get 403 code after sending this request, it means the user you are using has no Default Authorization Profile. You should assign one."
			},
			"response": []
		},
		{
			"name": "Get Area Type with Depth 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"//The ID of \"child\" area type is used here. \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//We are checking if area type has a parent and it is displayed as we assigned\r",
							"pm.test('The area type has a parent so depth 1 and its name is parentAreaType', () => {\r",
							"        responseText = pm.response.text();\r",
							"        pm.expect(responseText).includes(\"parentAreaType\");\r",
							"});\r",
							"\r",
							"//We are checking if area type has grand parent and it is displayed as we assigned\r",
							"pm.test('The area type has a grand parent so depth 2 and its name is grandma', () => {\r",
							"        responseText = pm.response.text();\r",
							"        pm.expect(responseText).includes(\"grandmaAreaType\");    \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"UeDEI_access_token\")\r",
							"pm.collectionVariables.get(\"childID\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UeDEI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://uedei.titan-main.apps.ef-dev.at/v1/areatypes/:childID",
					"protocol": "http",
					"host": [
						"uedei",
						"titan-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"v1",
						"areatypes",
						":childID"
					],
					"variable": [
						{
							"key": "childID",
							"value": "b6bd25dd-57b9-4741-ac58-de947d5b5bed"
						}
					]
				},
				"description": "Please do not delete 'system' and childAreaTypeID variables. Just update the value of them like written in the documentation of first request.\n\nIf you get 401 code, it means you need to send first request again.\n\n#### **You have to update the \"childAreaTypeID\" from EOCS-T902 directory -> Variables tab because you are working with other area type.**\n\n_\\*In this request, \"child\" area type is used._\n\nYou can get child area type id from the system. Open area type in detail view and copy the ID of it from the browser URL then paste it as explained just above.\n\n<img src=\"https://content.pstmn.io/b3a87f3b-6ce2-496e-a9a4-ca949c89e426/aW1hZ2UucG5n\" alt=\"Area%20Type%20ID%20from%20browser%20path\" width=\"797\" height=\"39\">\n\n<img src=\"https://content.pstmn.io/38f52f43-2b85-4aae-9b49-3518186100e5/aW1hZ2UucG5n\" alt=\"Area%20Type%20Names\" width=\"274\" height=\"79\">\n\n#### **You have to update the variables\\` names of \"parentName\" and \"grandparentName\" from the system because you are working with other types.**\n\n#### _**Child Area type should have a parent and this parent also should have a parent.**_"
			},
			"response": []
		},
		{
			"name": "Get Area Type with Depth 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"UeDEI_access_token\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"The area type has only a parent so depth 1 and its name is grandmaAreaType\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"grandmaAreaType\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UeDEI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://uedei.titan-main.apps.ef-dev.at/v1/areatypes/:parentID",
					"protocol": "http",
					"host": [
						"uedei",
						"titan-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"v1",
						"areatypes",
						":parentID"
					],
					"variable": [
						{
							"key": "parentID",
							"value": "908b8bca-338e-4bec-af69-0c9a31a73f0a"
						}
					]
				},
				"description": "Please do not delete 'system' and parentAreaTypeID variables. Just update the value of them like written in the documentation of first request.\n\nIf you get 401 code, it means you need to send first request again.\n\n#### **You have to update the \"parentAreaTypeID\" from EOCS-T902 directory -> Variables tab because you are working with other area type.**\n\nYou can get parent area type id from the system. Open this area type in detail view and copy the ID of it from the browser URL then paste it as explained just above.\n\n<img src=\"https://content.pstmn.io/b3a87f3b-6ce2-496e-a9a4-ca949c89e426/aW1hZ2UucG5n\" alt=\"Area%20Type%20ID%20from%20browser%20path\">\n\n<img src=\"https://content.pstmn.io/b36a8e91-b204-4cff-8410-ea4b51c09a54/aW1hZ2UucG5n\" alt=\"Area%20Type%20Name\" width=\"283\" height=\"68\">\n\n#### **You have to update the variable\\`s name of \"parentName\" from the system because you are working with other type.**\n\n#### _**parent Area type should have a parent (grandParent name in 1st request) and a child (child area name in 1st request).**_"
			},
			"response": []
		},
		{
			"name": "Get Area Type with Depth 0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"UeDEI_access_token\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The area type has no parent so depth 0\", function () {\r",
							"    pm.expect(response.item.parent).to.eql(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UeDEI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://uedei.titan-main.apps.ef-dev.at/v1/areatypes/:grandID",
					"protocol": "http",
					"host": [
						"uedei",
						"titan-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"v1",
						"areatypes",
						":grandID"
					],
					"variable": [
						{
							"key": "grandID",
							"value": "270fa3f5-df0b-473b-9f45-3aa95c8efd58"
						}
					]
				},
				"description": "Please do not delete 'system' and grandparentAreaTypeID variables. Just update the value of them like written in the documentation of first request.\n\nIf you get 401 code, it means you need to send first request again.\n\n#### **You have to update the \"grandparentAreaTypeID\" from EOCS-T902 directory -> Variables tab because you are working with other area type.**\n\nYou can get grand parent area type id from the system. Open this area type in detail view and copy the ID of it from the browser URL then paste it as explained just above.\n\n<img src=\"https://content.pstmn.io/b3a87f3b-6ce2-496e-a9a4-ca949c89e426/aW1hZ2UucG5n\" alt=\"Area%20Type%20ID%20from%20browser%20path\">\n\n<img src=\"https://content.pstmn.io/6b5625a3-a853-4422-af0a-d6aeb45d6550/aW1hZ2UucG5n\" alt=\"Area%20Type%20Name\" width=\"291\" height=\"62\">\n\n#### **You have to use null for the name of \"parentName\" because grand parent area type should not have any parent.**"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "childID",
			"value": ""
		},
		{
			"key": "system",
			"value": ""
		},
		{
			"key": "parentID",
			"value": ""
		},
		{
			"key": "grandID",
			"value": "",
			"type": "string"
		},
		{
			"key": "UeDEI_access_token",
			"value": ""
		}
	]
}