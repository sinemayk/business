{
	"info": {
		"_postman_id": "b00fa7a3-cf69-4fbf-bef3-8547be53c6d4",
		"name": "EOCS-T3167",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1555972"
	},
	"item": [
		{
			"name": "System Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"   pm.test(\"System is not reachable\", () =>{\r",
							"    if(pm.response.code!==200)\r",
							"{postman.setNextRequest(null)}\r",
							"});\r",
							"\r",
							" const response = pm.response.json()\r",
							"\r",
							"//We are checking here if we logged in successfully and the response is as expected\r",
							"pm.test(\"Login is successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(response).to.be.an(\"object\")\r",
							"    pm.expect(response).to.have.any.keys('authProfileId')\r",
							"    pm.expect(response).to.have.any.keys('needPWChange')\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"apiNormalTestUser\",\"password\":\"apiNormalTestUser\"}"
				},
				"url": {
					"raw": "https://{{system}}-main.apps.ef-dev.at/api/login",
					"protocol": "https",
					"host": [
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"api",
						"login"
					]
				},
				"description": "Please do not delete \"system\" variable. Just update it with the system you are testing in EOCS-T1661 folder Variables tab like in the picture.\n\n<img src=\"https://content.pstmn.io/6eaba942-7f7c-44ce-9995-c8193ab0ca19/aW1hZ2UucG5n\" alt=\"Variables%20of%20collection\">\n\nWith this request, we are logging with special user. **In this request, I used BAO user but you can change it in Body tab as in the picture.**\n\n<img src=\"https://content.pstmn.io/4f215a7f-edfc-4c90-a453-005e96bb436a/aW1hZ2UucG5n\" alt=\"Special%20user%20config\">\n\nIf you get 403 status code, you should select default auth profile for special user you are using.\n\nIf you get 400 status code, you should first logout. Just send Extra Step -Logout from System request."
			},
			"response": []
		},
		{
			"name": "Create Incident",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"incidentId\", pm.response.json().id)\r",
							"pm.collectionVariables.set(\"incidentA\", pm.response.json().number)\r",
							"\r",
							"let currentTime = (Math.floor(Date.now() / 1000)-3)\r",
							"pm.collectionVariables.set(\"incidentTime\", currentTime)\r",
							"\r",
							"\r",
							"pm.test(\"Incident \"+pm.collectionVariables.get(\"incidentA\")+\" is created\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{system}}-main.apps.ef-dev.at/api/incidents",
					"protocol": "https",
					"host": [
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"api",
						"incidents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 3-eITI Login with user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()\r",
							"\r",
							"//We are checking here if response is as expected\r",
							"pm.test(\"User 1 logged in successfully\", ()=>{\r",
							"    pm.expect(response).to.be.an(\"object\")\r",
							"    pm.expect(response).to.have.any.keys('access_token')\r",
							"     pm.response.to.have.status(200);\r",
							"    \r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"eITI_access_token\", response.access_token)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "authorization",
						"value": "Basic QkFPOjg2MTczZTE2LWMyMDctNGM3OC04ZTgwLWFmNDBlYWFlNmY5NA==",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "ApiTestUser",
							"description": "Update this with your user1",
							"type": "text"
						},
						{
							"key": "password",
							"value": "ApiTestUser",
							"description": "Update this with your user1",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://eiti.{{system}}-main.apps.ef-dev.at/v1/registerSession",
					"protocol": "http",
					"host": [
						"eiti",
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"v1",
						"registerSession"
					]
				},
				"description": "Login eITI of any system\n\nYou need to write the system name you would like to test in the following area.\n\n1. Click on EOCS-T3167 folder on left.\n2. Click Variables tab.\n3. Enter any system (for ex. master, titan, vega, etc.) in Current value field.\n    \n\n<img src=\"https://content.pstmn.io/23e67e88-f75b-40aa-bb3f-7580e4128b84/aW1hZ2UucG5n\" width=\"1132\" height=\"345\">\n\nClick on the picture to see it bigger.\n\nAfter sending request succesfully, check if the 'access_token' from response exist as in the following picture.\n\nAfter opening EOCS-T3167 directory and variables tab, look for eiti_access_token variable, if it does not exist ,add it and paste the copied access token value from first request in Current value field.\n\n<img src=\"https://content.pstmn.io/ae8bbe9a-d4fd-4aa7-8bee-e95cd9f05a2c/aW1hZ2UucG5n\" alt=\"Adding%20access%20token\">\n\nFor every request after eITI Authenticate request, you select Bearer token as Authorization type and write the token field {{eITI_access_token}} as in the above picture.\n\n<img src=\"https://content.pstmn.io/66146ce5-e2b3-4276-bbd6-b3a64565f408/aW1hZ2UucG5n\" alt=\"Authorization%20type%20for%20other%20requests\" width=\"318\" height=\"145\">\n\n_**_\n\n**You need to update username and password values in Body tab of this request otherwise you will get error.**\n\n<img src=\"https://content.pstmn.io/68cbeb57-a0f5-4e6f-ab78-2f47dd704b16/aW1hZ2UucG5n\" alt=\"\" height=\"323\" width=\"615\">\n\nIf you get 403 code after sending this request, it means the user you are using has no Default Authorization Profile. You should assign one."
			},
			"response": []
		},
		{
			"name": "Step 4-Display Incident A",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const incidentAID= pm.collectionVariables.get(\"incidentId\")\r",
							"const incidentA = pm.collectionVariables.get(\"incidentA\")\r",
							"pm.collectionVariables.get(\"incidentTime\")\r",
							"\r",
							"//We are checking if incident A is shown in response\r",
							"pm.test(\"Response contains incident A-> \" +incidentA+ \"\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    \r",
							"    responseText = pm.response.text();\r",
							"    pm.expect(responseText).includes(incidentA);\r",
							"    pm.expect(responseText).includes(incidentAID);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eITI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://eiti.{{system}}-main.apps.ef-dev.at/incidents?modifiedSince={{incidentTime}}",
					"protocol": "http",
					"host": [
						"eiti",
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"incidents"
					],
					"query": [
						{
							"key": "modifiedSince",
							"value": "{{incidentTime}}",
							"description": "Set time just before you created Incident"
						}
					]
				},
				"description": "**Please do not delete \"system\" variable. Just update them in EOCS-T3167 directory in Variables tab.**\n\n**We are displaying Incident A with user 1.**\n\nYou should get first Incident Id from the system.\n\nIn this request, i used my incident.\n\nYou can find Incident Id from devtools or Kibana.\n\nIf you open and close incident detail in layer 3 (detail layer) and track network with devtools, you will get this traffic and find id in \"close\" action.\n\n<img src=\"https://content.pstmn.io/0ea93e75-e32e-4edc-b5de-73085f1fe0bd/aW1hZ2UucG5n\" alt=\"Incident%20Id%20in%20devtools\">\n\nOr you can search Incident with the user who created Incident and the time when it is created from incident index in Kibana.\n\n<img src=\"https://content.pstmn.io/c78c4875-3812-4a75-aa94-358b409a7b86/aW1hZ2UucG5n\" alt=\"Kibana\">\n\nYou can cross check the logs with number of Incident.\n\n**After you have Incident ID (and number) you need update** _**these values**_ **in Tests tab of this request.**\n\n<img src=\"https://content.pstmn.io/2ba666d3-31c9-4ecd-9a28-844af23e4bcd/aW1hZ2UucG5n\" width=\"546\" height=\"59\">\n\nYou need to update modifiedSince value in Params tab of this request.\n\n<img src=\"https://content.pstmn.io/3df74489-e1b9-4a89-9575-2ed13c8d2797/aW1hZ2UucG5n\" alt=\"modifiedSince\" width=\"1164\" height=\"252\">\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Pre-Set Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//We are checking if we delete password of the incident.\r",
							"pm.test(\"Password of the incident is set\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"incidentId\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"newPassword\": \"123\",\r\n  \"hint\": \"\",\r\n  \"oldPassword\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{system}}-main.apps.ef-dev.at/api/incidents/:incidentId/setPassword",
					"protocol": "https",
					"host": [
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"api",
						"incidents",
						":incidentId",
						"setPassword"
					],
					"variable": [
						{
							"key": "incidentId",
							"value": "{{incidentId}}"
						}
					]
				},
				"description": "**Please do not delete \"system\" and \"IncidentID\" variables. Just update them in EOCS-T1661 directory in Variables tab.**\n\n**We are setting password to Incident with special user.**\n\nYou should get first Incident Id.\n\nYou can find Incident Id from devtools or Kibana.\n\nIf you open and close incident detail in layer 3 (detail layer) and track network with devtools, you will get this traffic and find id in \"close\" action.\n\n<img src=\"https://content.pstmn.io/0ea93e75-e32e-4edc-b5de-73085f1fe0bd/aW1hZ2UucG5n\" alt=\"Incident%20Id%20in%20devtools\">\n\nOr you can search Incident with the user who created Incident and the time when it is created from incident index in Kibana.\n\n<img src=\"https://content.pstmn.io/c78c4875-3812-4a75-aa94-358b409a7b86/aW1hZ2UucG5n\" alt=\"Kibana\">\n\nYou can cross check the logs with number of Incident. **I used PPH/230601/320702 for this request.**\n\n**We are checking if we can set password to the Incident. You can add any password you like in Bosy tab of this request but do not remove quotes. \"\"**\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 6-Display Incident A with Password Hash",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const count = response.elements.length\r",
							"\r",
							"pm.collectionVariables.get(\"incidentTime\")\r",
							"const incidentA = pm.collectionVariables.get(\"incidentA\")\r",
							"const incidentAID = pm.collectionVariables.get(\"incidentId\")\r",
							"\r",
							"//We are checking if incident A is shown in response\r",
							"pm.test(\"Response contains incident A-> \" +incidentA+ \"\", () => {\r",
							"    pm.expect(response.elements.length).at.least(1);\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    responseText = pm.response.text();\r",
							"    pm.expect(responseText).includes(incidentA);\r",
							"    pm.expect(responseText).includes(incidentAID);\r",
							"\r",
							"});\r",
							"\r",
							"for (let i =0 ; i < count; i++) {\r",
							"    \r",
							"if (Object.values(response.elements[i]).includes(incidentA)) {\r",
							"\r",
							"    //We are checking if Password Hash exist and not empty\r",
							"pm.test(\"Password Hash of \" +pm.collectionVariables.get(\"incidentA\")+ \" exists and not empty\", () => {\r",
							"\r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"incidentPassword\").not.to.be.empty;\r",
							"  \r",
							"});\r",
							"//We are checking if Password Hint exist and empty\r",
							"pm.test(\"Password Hint of \" +pm.collectionVariables.get(\"incidentA\")+ \" exists but empty \", () => {\r",
							" \r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"passwordHint\").to.be.empty;\r",
							" \r",
							"});\r",
							"\r",
							"}}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eITI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://eiti.{{system}}-main.apps.ef-dev.at/incidents?modifiedSince={{incidentTime}}",
					"protocol": "http",
					"host": [
						"eiti",
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"incidents"
					],
					"query": [
						{
							"key": "modifiedSince",
							"value": "{{incidentTime}}",
							"description": "Use same value in previous step"
						}
					]
				},
				"description": "**Please do not delete \"system\" variable. Just update them in EOCS-T3167 Variables tab.**\n\nWe are displaying Incident A with Password Hash. It should not be empty but password hint should be empty.\n\n**You need to update again these variables in Tests tab of this request.**\n\n<img src=\"https://content.pstmn.io/2ba666d3-31c9-4ecd-9a28-844af23e4bcd/aW1hZ2UucG5n\">\n\nYou need to update modifiedSince value in Params tab of this request.\n\n<img src=\"https://content.pstmn.io/3df74489-e1b9-4a89-9575-2ed13c8d2797/aW1hZ2UucG5n\" alt=\"modifiedSince\">\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 7-Remove Password with special user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//We are checking if we delete password of the incident.\r",
							"pm.test(\"Password of the incident is set\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"incidentId\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "123",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{system}}-main.apps.ef-dev.at/api/incidents/:incidentID/deletePassword",
					"protocol": "https",
					"host": [
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"api",
						"incidents",
						":incidentID",
						"deletePassword"
					],
					"variable": [
						{
							"key": "incidentID",
							"value": "{{incidentId}}"
						}
					]
				},
				"description": "**Please do not delete \"system\" and \"IncidentID\" variables. Just update them in EOCS-T1661 directory in Variables tab.**\n\n**We are setting password to Incident with special user.**\n\nYou should get first Incident Id.\n\nYou can find Incident Id from devtools or Kibana.\n\nIf you open and close incident detail in layer 3 (detail layer) and track network with devtools, you will get this traffic and find id in \"close\" action.\n\n<img src=\"https://content.pstmn.io/0ea93e75-e32e-4edc-b5de-73085f1fe0bd/aW1hZ2UucG5n\" alt=\"Incident%20Id%20in%20devtools\">\n\nOr you can search Incident with the user who created Incident and the time when it is created from incident index in Kibana.\n\n<img src=\"https://content.pstmn.io/c78c4875-3812-4a75-aa94-358b409a7b86/aW1hZ2UucG5n\" alt=\"Kibana\">\n\nYou can cross check the logs with number of Incident. **I used PPH/230601/320702 for this request.**\n\n**We are checking if we can set password to the Incident. You can add any password you like in Bosy tab of this request but do not remove quotes. \"\"**\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 8-Display Incident A with empty Password Hash and Hint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const count = response.elements.length\r",
							"\r",
							"pm.collectionVariables.get(\"incidentTime\")\r",
							"const incidentA = pm.collectionVariables.get(\"incidentA\")\r",
							"const incidentAID = pm.collectionVariables.get(\"incidentId\")\r",
							"\r",
							"\r",
							"//We are checking if incident A is shown in response\r",
							"pm.test(\"Response contains incident A-> \" +incidentA+ \"\", () => {\r",
							"    pm.expect(response.elements.length).at.least(1);\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    responseText = pm.response.text();\r",
							"    pm.expect(responseText).includes(incidentA);\r",
							"    pm.expect(responseText).includes(incidentAID);\r",
							"\r",
							"});\r",
							"\r",
							"for (let i =0 ; i < count; i++) {\r",
							"    \r",
							"if (Object.values(response.elements[i]).includes(incidentA)) {\r",
							"\r",
							"    //We are checking if Password Hash exist but empty\r",
							"pm.test(\"Password Hash of \" +incidentA+ \" exists but empty\", () => {\r",
							"\r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"incidentPassword\").to.be.null;\r",
							"  \r",
							"});\r",
							"//We are checking if Password Hint exist but empty\r",
							"pm.test(\"Password Hint of \" +incidentA+ \" exists but empty \", () => {\r",
							" \r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"passwordHint\").to.be.null;\r",
							" \r",
							"});\r",
							"\r",
							"}}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eITI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://eiti.{{system}}-main.apps.ef-dev.at/incidents?modifiedSince={{incidentTime}}",
					"protocol": "http",
					"host": [
						"eiti",
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"incidents"
					],
					"query": [
						{
							"key": "modifiedSince",
							"value": "{{incidentTime}}",
							"description": "Use same value in previous step"
						}
					]
				},
				"description": "**Please do not delete \"system\" variable. Just update them in EOCS-T3167 Variables tab.**\n\nWe are displaying Incident A but without Password Hash and Password Hint values because the Incident has no password in this step.\n\n**You need to update again these variables in Tests tab of this request.**\n\n<img src=\"https://content.pstmn.io/2ba666d3-31c9-4ecd-9a28-844af23e4bcd/aW1hZ2UucG5n\">\n\nYou need to update modifiedSince value in Params tab of this request.\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 9 -Set Password with special user with responsible",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//We are checking if we delete password of the incident.\r",
							"pm.test(\"Password of the incident is set\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"incidentId\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"newPassword\": \"123\",\r\n  \"hint\": \"responsible\",\r\n  \"oldPassword\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{system}}-main.apps.ef-dev.at/api/incidents/:incidentId/setPassword",
					"protocol": "https",
					"host": [
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"api",
						"incidents",
						":incidentId",
						"setPassword"
					],
					"variable": [
						{
							"key": "incidentId",
							"value": "{{incidentId}}"
						}
					]
				},
				"description": "**Please do not delete \"system\" and \"IncidentID\" variables. Just update them in EOCS-T1661 directory in Variables tab.**\n\n**We are setting password to Incident with special user.**\n\nYou should get first Incident Id.\n\nYou can find Incident Id from devtools or Kibana.\n\nIf you open and close incident detail in layer 3 (detail layer) and track network with devtools, you will get this traffic and find id in \"close\" action.\n\n<img src=\"https://content.pstmn.io/0ea93e75-e32e-4edc-b5de-73085f1fe0bd/aW1hZ2UucG5n\" alt=\"Incident%20Id%20in%20devtools\">\n\nOr you can search Incident with the user who created Incident and the time when it is created from incident index in Kibana.\n\n<img src=\"https://content.pstmn.io/c78c4875-3812-4a75-aa94-358b409a7b86/aW1hZ2UucG5n\" alt=\"Kibana\">\n\nYou can cross check the logs with number of Incident. **I used PPH/230601/320702 for this request.**\n\n**We are checking if we can set password to the Incident. You can add any password you like in Bosy tab of this request but do not remove quotes. \"\"**\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 10-Display Incident A with Password Hash and Hint from step 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const count = response.elements.length\r",
							"\r",
							"pm.collectionVariables.get(\"incidentTime\")\r",
							"const incidentA = pm.collectionVariables.get(\"incidentA\")\r",
							"const incidentAID = pm.collectionVariables.get(\"incidentId\")\r",
							"\r",
							"const passwordHint = \"responsible\" //Write here what you set as \"Responsible for password protection\" in Step 9\r",
							"\r",
							"//We are checking if incident A is shown in response\r",
							"pm.test(\"Response contains incident A-> \" +incidentA+ \"\", () => {\r",
							"    pm.expect(response.elements.length).at.least(1);\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    responseText = pm.response.text();\r",
							"    pm.expect(responseText).includes(incidentA);\r",
							"    pm.expect(responseText).includes(incidentAID);\r",
							"\r",
							"});\r",
							"\r",
							"for (let i =0 ; i < count; i++) {\r",
							"    \r",
							"if (Object.values(response.elements[i]).includes(incidentA)) {\r",
							"\r",
							"    //We are checking if Password Hash exist and not empty\r",
							"pm.test(\"Password Hash of \" +incidentA+ \" exists but empty\", () => {\r",
							"\r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"incidentPassword\").not.to.be.empty;\r",
							"  \r",
							"});\r",
							"//We are checking if Password Hint exists, not empty and same with what user 1 set in Incident\r",
							"pm.test(\"Password Hint of \" +incidentA+ \" exists, not empty and same with what user 1 set in Incident\", () => {\r",
							" \r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"passwordHint\").not.to.be.empty;\r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"passwordHint\").to.be.eql(passwordHint)\r",
							"});\r",
							"\r",
							"}}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eITI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://eiti.{{system}}-main.apps.ef-dev.at/incidents?modifiedSince={{incidentTime}}",
					"protocol": "http",
					"host": [
						"eiti",
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"incidents"
					],
					"query": [
						{
							"key": "modifiedSince",
							"value": "{{incidentTime}}",
							"description": "Use same value in previous step"
						}
					]
				},
				"description": "**Please do not delete \"system\" variable. Just update them in EOCS-T3167 Variables tab.**\n\n**We are displaying Incident A with Password Hash and Password Hint. They should not be empty and password hint should be same with the user 1 set in step 9.  \nSo you need to update passwordHint variable in addition to incident variables in Tests tab of this request.**\n\n<img src=\"https://content.pstmn.io/fa7e9608-91fc-4302-9b7d-22011ddf5db4/aW1hZ2UucG5n\" width=\"616\" height=\"81\">\n\nYou need to update modifiedSince value in Params tab of this request.\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 11 -Change Password with special user with new responsible",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//We are checking if we delete password of the incident.\r",
							"pm.test(\"Password of the incident is set\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"incidentId\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"newPassword\": \"2\",\r\n  \"hint\": \"newHint\",\r\n  \"oldPassword\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{system}}-main.apps.ef-dev.at/api/incidents/:incidentId/changePassword",
					"protocol": "https",
					"host": [
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"api",
						"incidents",
						":incidentId",
						"changePassword"
					],
					"variable": [
						{
							"key": "incidentId",
							"value": "{{incidentId}}"
						}
					]
				},
				"description": "**Please do not delete \"system\" and \"IncidentID\" variables. Just update them in EOCS-T1661 directory in Variables tab.**\n\n**We are setting password to Incident with special user.**\n\nYou should get first Incident Id.\n\nYou can find Incident Id from devtools or Kibana.\n\nIf you open and close incident detail in layer 3 (detail layer) and track network with devtools, you will get this traffic and find id in \"close\" action.\n\n<img src=\"https://content.pstmn.io/0ea93e75-e32e-4edc-b5de-73085f1fe0bd/aW1hZ2UucG5n\" alt=\"Incident%20Id%20in%20devtools\">\n\nOr you can search Incident with the user who created Incident and the time when it is created from incident index in Kibana.\n\n<img src=\"https://content.pstmn.io/c78c4875-3812-4a75-aa94-358b409a7b86/aW1hZ2UucG5n\" alt=\"Kibana\">\n\nYou can cross check the logs with number of Incident. **I used PPH/230601/320702 for this request.**\n\n**We are checking if we can set password to the Incident. You can add any password you like in Bosy tab of this request but do not remove quotes. \"\"**\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 12-Display Incident A with new Password, Hash and Hint from step 11",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const count = response.elements.length\r",
							"\r",
							"const incidentAID=pm.collectionVariables.get(\"incidentId\")\r",
							"const incidentA= pm.collectionVariables.get(\"incidentA\")\r",
							"const passwordHint=\"newHint\"\r",
							"\r",
							"//We are checking if incident A is shown in response\r",
							"pm.test(\"Response contains incident A-> \" +incidentA+ \"\", () => {\r",
							"    pm.expect(response.elements.length).at.least(1);\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    responseText = pm.response.text();\r",
							"    pm.expect(responseText).includes(incidentA);\r",
							"    pm.expect(responseText).includes(incidentAID);\r",
							"\r",
							"});\r",
							"\r",
							"for (let i =0 ; i < count; i++) {\r",
							"    \r",
							"if (Object.values(response.elements[i]).includes(incidentA)) {\r",
							"\r",
							"    //We are checking if Password Hash exist and not empty\r",
							"pm.test(\"Password Hash of \" +incidentA+ \" exists but empty\", () => {\r",
							"\r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"incidentPassword\").not.to.be.empty;\r",
							"  \r",
							"});\r",
							"//We are checking if Password Hint exists, not empty and same with what user 1 set new in Incident\r",
							"pm.test(\"Password Hint of \" +incidentA+ \" exists, not empty and same with what user 1 set new in Incident\", () => {\r",
							" \r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"passwordHint\").not.to.be.empty;\r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"passwordHint\").to.be.eql(passwordHint)\r",
							"});\r",
							"\r",
							"}}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eITI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://eiti.{{system}}-main.apps.ef-dev.at/incidents?modifiedSince={{incidentTime}}",
					"protocol": "http",
					"host": [
						"eiti",
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"incidents"
					],
					"query": [
						{
							"key": "modifiedSince",
							"value": "{{incidentTime}}",
							"description": "Use same value in previous step"
						}
					]
				},
				"description": "**Please do not delete \"system\" variable. Just update them in EOCS-T3167 Variables tab.**\n\n**We are displaying Incident A with Password Hash and Password Hint. They should not be empty and password hint should be same with the user 1 set in step 11.** So you need to update again passwordHint variable in addition to incident variables in Tests tab of this request.\n\n<img src=\"https://content.pstmn.io/fa7e9608-91fc-4302-9b7d-22011ddf5db4/aW1hZ2UucG5n\">\n\nYou need to update modifiedSince value in Params tab of this request.\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 13-eITI Login with user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()\r",
							"\r",
							"//We are checking here if response is as expected\r",
							"pm.test(\"User 2 logged in successfully\", ()=>{\r",
							"    pm.expect(response).to.be.an(\"object\")\r",
							"    pm.expect(response).to.have.any.keys('access_token')\r",
							"    pm.response.to.have.status(200);\r",
							"    \r",
							"})\r",
							"pm.collectionVariables.set(\"eITI_access_token\", response.access_token)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "authorization",
						"value": "Basic QkFPOjg2MTczZTE2LWMyMDctNGM3OC04ZTgwLWFmNDBlYWFlNmY5NA==",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "ApiTestUser2",
							"type": "text"
						},
						{
							"key": "password",
							"value": "ApiTestUser2",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://eiti.{{system}}-main.apps.ef-dev.at/v1/registerSession",
					"protocol": "http",
					"host": [
						"eiti",
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"v1",
						"registerSession"
					]
				},
				"description": "Login eITI of any system\n\nYou need to write the system name you would like to test in the following area.\n\n1. Click on EOCS-T3167 folder on left.\n2. Click Variables tab.\n3. Enter any system (for ex. master, titan, vega, etc.) in Current value field.\n    \n\n<img src=\"https://content.pstmn.io/23e67e88-f75b-40aa-bb3f-7580e4128b84/aW1hZ2UucG5n\" width=\"1132\" height=\"345\">\n\nClick on the picture to see it bigger.\n\nAfter sending request succesfully, check if the 'access_token' from response exist as in the following picture.\n\nAfter opening EOCS-T3167 directory and variables tab, look for eiti_access_token variable, if it does not exist ,add it and paste the copied access token value from first request in Current value field.\n\n<img src=\"https://content.pstmn.io/ae8bbe9a-d4fd-4aa7-8bee-e95cd9f05a2c/aW1hZ2UucG5n\" alt=\"Adding%20access%20token\">\n\nFor every request after eITI Authenticate request, you select Bearer token as Authorization type and write the token field {{eITI_access_token}} as in the above picture.\n\n<img src=\"https://content.pstmn.io/66146ce5-e2b3-4276-bbd6-b3a64565f408/aW1hZ2UucG5n\" alt=\"Authorization%20type%20for%20other%20requests\" width=\"318\" height=\"145\">\n\n_**_\n\n**You need update username and password values in Body tab of this request. Otherwise you will get error.**\n\n<img src=\"https://content.pstmn.io/1ac3c483-7760-46ec-b7eb-4bf16d5be0c5/aW1hZ2UucG5n\" alt=\"\" height=\"356\" width=\"594\">\n\nIf you get 403 code after sending this request, it means the user you are using has no Default Authorization Profile. You should assign one."
			},
			"response": []
		},
		{
			"name": "Step 14 -Reset Password with special user 2 with new responsible",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//We are checking if we delete password of the incident.\r",
							"pm.test(\"Password of the incident is set\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"incidentId\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"newPassword\": \"125\",\r\n  \"hint\": \"newHintUser2\",\r\n  \"oldPassword\": \"2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{system}}-main.apps.ef-dev.at/api/incidents/:incidentId/changePassword",
					"protocol": "https",
					"host": [
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"api",
						"incidents",
						":incidentId",
						"changePassword"
					],
					"variable": [
						{
							"key": "incidentId",
							"value": "{{incidentId}}"
						}
					]
				},
				"description": "**Please do not delete \"system\" and \"IncidentID\" variables. Just update them in EOCS-T1661 directory in Variables tab.**\n\n**We are setting password to Incident with special user.**\n\nYou should get first Incident Id.\n\nYou can find Incident Id from devtools or Kibana.\n\nIf you open and close incident detail in layer 3 (detail layer) and track network with devtools, you will get this traffic and find id in \"close\" action.\n\n<img src=\"https://content.pstmn.io/0ea93e75-e32e-4edc-b5de-73085f1fe0bd/aW1hZ2UucG5n\" alt=\"Incident%20Id%20in%20devtools\">\n\nOr you can search Incident with the user who created Incident and the time when it is created from incident index in Kibana.\n\n<img src=\"https://content.pstmn.io/c78c4875-3812-4a75-aa94-358b409a7b86/aW1hZ2UucG5n\" alt=\"Kibana\">\n\nYou can cross check the logs with number of Incident. **I used PPH/230601/320702 for this request.**\n\n**We are checking if we can set password to the Incident. You can add any password you like in Bosy tab of this request but do not remove quotes. \"\"**\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 15-Display Incident A with new Password hash and hint from step 14",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const count = response.elements.length\r",
							"\r",
							"const incidentAID=pm.collectionVariables.get(\"incidentId\")\r",
							"const incidentA= pm.collectionVariables.get(\"incidentA\")\r",
							"const passwordHint=\"newHintUser2\"\r",
							"\r",
							"//We are checking if incident A is shown in response\r",
							"pm.test(\"Response contains incident A-> \" +incidentA+ \"\", () => {\r",
							"    pm.expect(response.elements.length).at.least(1);\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    responseText = pm.response.text();\r",
							"    pm.expect(responseText).includes(incidentA);\r",
							"    pm.expect(responseText).includes(incidentAID);\r",
							"\r",
							"});\r",
							"\r",
							"for (let i =0 ; i < count; i++) {\r",
							"    \r",
							"if (Object.values(response.elements[i]).includes(incidentA)) {\r",
							"\r",
							"    //We are checking if Password Hash exist and not empty\r",
							"pm.test(\"Password Hash of \" +incidentA+ \" exists but empty\", () => {\r",
							"\r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"incidentPassword\").not.to.be.empty;\r",
							"  \r",
							"});\r",
							"//We are checking if Password Hint exists, not empty and same with what user 2 set new in Incident\r",
							"pm.test(\"Password Hint of \" +incidentA+ \" exists, not empty and same with what user 2 set new in Incident\", () => {\r",
							" \r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"passwordHint\").not.to.be.empty;\r",
							"    pm.expect(response.elements[i]).haveOwnProperty(\"passwordHint\").to.be.eql(passwordHint)\r",
							"});\r",
							"\r",
							"}}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eITI_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://eiti.{{system}}-main.apps.ef-dev.at/incidents?modifiedSince={{incidentTime}}",
					"protocol": "http",
					"host": [
						"eiti",
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"incidents"
					],
					"query": [
						{
							"key": "modifiedSince",
							"value": "{{incidentTime}}",
							"description": "Use same value in step 12"
						}
					]
				},
				"description": "**Please do not delete \"system\" variable. Just update them in EOCS-T3167 Variables tab.**\n\n**We are displaying Incident A with Password Hash and new Password Hint. They should not be empty and password hint should be same with the user 2 set in step 12.** So you need to update again passwordHint variable in addition to incident variables in Tests tab of this request.\n\n<img src=\"https://content.pstmn.io/a9eefbdc-b8f3-4b62-85af-c90940d4eab3/aW1hZ2UucG5n\" width=\"821\" height=\"66\">\n\nYou need to update modifiedSince value in Params tab of this request.\n\nIf you get 401 status code, you need to login again with first request."
			},
			"response": []
		},
		{
			"name": "Step 16-Check Protocol",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const count = response.elements.length\r",
							"\r",
							"const incidentAID=pm.collectionVariables.get(\"incidentId\")\r",
							"const incidentA= pm.collectionVariables.get(\"incidentA\")\r",
							"\r",
							"//We are checking if incident A is shown in response\r",
							"pm.test(incidentA+ \" contains PASSWORD_SET, PASSWORD_CHANGED, PASSWORD_DELETED protocol messages\", () => {\r",
							"    pm.expect(response.elements.length).at.least(1);\r",
							"\r",
							"    responseText = pm.response.text();\r",
							"    pm.expect(responseText).includes(\"PASSWORD_SET\");\r",
							"    pm.expect(responseText).includes(\"PASSWORD_CHANGED\");\r",
							"    pm.expect(responseText).includes(\"PASSWORD_DELETED\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"let numberOfSet =0\r",
							"let numberOfChange =0\r",
							"for (let i =0 ; i < count; i++) {\r",
							"    \r",
							"if (Object.values(response.elements[i]).includes(\"PASSWORD_SET\") ) {\r",
							"    \r",
							"    numberOfSet = numberOfSet+1\r",
							"\r",
							"}\r",
							"\r",
							"if (Object.values(response.elements[i]).includes(\"PASSWORD_CHANGED\") ) {\r",
							"    \r",
							"    numberOfChange = numberOfChange+1\r",
							"\r",
							"}}\r",
							"\r",
							"pm.test(\"Password of \" +incidentA+\" is set and changed two times\", () =>{\r",
							"    pm.expect(numberOfSet).to.eql(2)\r",
							"    pm.expect(numberOfChange).to.eql(2)\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{system}}-main.apps.ef-dev.at/api/incidents/:incidentId/protocolaggregations/6afd6d83-eace-4805-a505-df134a41645a?startRow=0&size=100",
					"protocol": "https",
					"host": [
						"{{system}}-main",
						"apps",
						"ef-dev",
						"at"
					],
					"path": [
						"api",
						"incidents",
						":incidentId",
						"protocolaggregations",
						"6afd6d83-eace-4805-a505-df134a41645a"
					],
					"query": [
						{
							"key": "startRow",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					],
					"variable": [
						{
							"key": "incidentId",
							"value": "{{incidentId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "system",
			"value": "master",
			"disabled": true
		},
		{
			"key": "eITI_access_token",
			"value": ""
		},
		{
			"key": "incidentId",
			"value": ""
		},
		{
			"key": "incidentA",
			"value": ""
		},
		{
			"key": "incidentTime",
			"value": ""
		}
	]
}